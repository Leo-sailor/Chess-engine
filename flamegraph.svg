<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="8311"><g><title>ntdll`LdrGetProcedureAddressEx (1 samples, 0.01%)</title><rect x="0.0000%" y="357" width="0.0120%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>ntdll`LdrGetProcedureAddressEx (1 samples, 0.01%)</title><rect x="0.0000%" y="341" width="0.0120%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>ntdll`LdrGetProcedureAddressEx (1 samples, 0.01%)</title><rect x="0.0000%" y="325" width="0.0120%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>ntdll`LdrGetProcedureAddressEx (1 samples, 0.01%)</title><rect x="0.0000%" y="309" width="0.0120%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>ntdll`RtlActivateActivationContextUnsafeFast (1 samples, 0.01%)</title><rect x="0.0000%" y="293" width="0.0120%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>ucrtbase`msize (1 samples, 0.01%)</title><rect x="0.0000%" y="277" width="0.0120%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>ucrtbase`o__recalloc (1 samples, 0.01%)</title><rect x="0.0000%" y="261" width="0.0120%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>ucrtbase`fegetenv (1 samples, 0.01%)</title><rect x="0.0000%" y="245" width="0.0120%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>ucrtbase`fegetenv (1 samples, 0.01%)</title><rect x="0.0000%" y="229" width="0.0120%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>ucrtbase`fegetenv (1 samples, 0.01%)</title><rect x="0.0000%" y="213" width="0.0120%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="223.50"></text></g><g><title>ucrtbase`atof (1 samples, 0.01%)</title><rect x="0.0000%" y="197" width="0.0120%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="207.50"></text></g><g><title>ucrtbase`atof (1 samples, 0.01%)</title><rect x="0.0000%" y="181" width="0.0120%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="191.50"></text></g><g><title>ucrtbase`atof (1 samples, 0.01%)</title><rect x="0.0000%" y="165" width="0.0120%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="175.50"></text></g><g><title>ucrtbase`atof (1 samples, 0.01%)</title><rect x="0.0000%" y="149" width="0.0120%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="159.50"></text></g><g><title>KERNELBASE`LCMapStringEx (1 samples, 0.01%)</title><rect x="0.0000%" y="133" width="0.0120%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="143.50"></text></g><g><title>KERNELBASE`GetApplicationUserModelIdFromToken (1 samples, 0.01%)</title><rect x="0.0000%" y="117" width="0.0120%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="127.50"></text></g><g><title>KERNELBASE`OpenGlobalizationUserSettingsKey (1 samples, 0.01%)</title><rect x="0.0000%" y="101" width="0.0120%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="1"/><text x="0.2500%" y="111.50"></text></g><g><title>ntdll`NtQueryValueKey (1 samples, 0.01%)</title><rect x="0.0000%" y="85" width="0.0120%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="1"/><text x="0.2500%" y="95.50"></text></g><g><title>ntdll`LdrInitShimEngineDynamic (1 samples, 0.01%)</title><rect x="0.0120%" y="341" width="0.0120%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="1"/><text x="0.2620%" y="351.50"></text></g><g><title>ntdll`NtOpenKey (1 samples, 0.01%)</title><rect x="0.0120%" y="325" width="0.0120%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="1"/><text x="0.2620%" y="335.50"></text></g><g><title>ntdll`LdrInitShimEngineDynamic (2 samples, 0.02%)</title><rect x="0.0120%" y="357" width="0.0241%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="2"/><text x="0.2620%" y="367.50"></text></g><g><title>ntdll`RtlCreateHeap (1 samples, 0.01%)</title><rect x="0.0241%" y="341" width="0.0120%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="1"/><text x="0.2741%" y="351.50"></text></g><g><title>ntdll`TpWaitForWait (1 samples, 0.01%)</title><rect x="0.0241%" y="325" width="0.0120%" height="15" fill="rgb(221,5,38)" fg:x="2" fg:w="1"/><text x="0.2741%" y="335.50"></text></g><g><title>ntdll`NtFreeVirtualMemory (1 samples, 0.01%)</title><rect x="0.0241%" y="309" width="0.0120%" height="15" fill="rgb(247,18,42)" fg:x="2" fg:w="1"/><text x="0.2741%" y="319.50"></text></g><g><title>ntdll`LdrShutdownThread (2 samples, 0.02%)</title><rect x="0.0361%" y="245" width="0.0241%" height="15" fill="rgb(241,131,45)" fg:x="3" fg:w="2"/><text x="0.2861%" y="255.50"></text></g><g><title>ntdll`RtlReleaseRelativeName (2 samples, 0.02%)</title><rect x="0.0361%" y="229" width="0.0241%" height="15" fill="rgb(249,31,29)" fg:x="3" fg:w="2"/><text x="0.2861%" y="239.50"></text></g><g><title>ntdll`RtlFindCharInUnicodeString (2 samples, 0.02%)</title><rect x="0.0361%" y="213" width="0.0241%" height="15" fill="rgb(225,111,53)" fg:x="3" fg:w="2"/><text x="0.2861%" y="223.50"></text></g><g><title>ntdll`RtlCompareUnicodeStrings (1 samples, 0.01%)</title><rect x="0.0481%" y="197" width="0.0120%" height="15" fill="rgb(238,160,17)" fg:x="4" fg:w="1"/><text x="0.2981%" y="207.50"></text></g><g><title>ntdll`LdrUnloadAlternateResourceModuleEx (4 samples, 0.05%)</title><rect x="0.0361%" y="309" width="0.0481%" height="15" fill="rgb(214,148,48)" fg:x="3" fg:w="4"/><text x="0.2861%" y="319.50"></text></g><g><title>ntdll`RtlReleaseActivationContext (4 samples, 0.05%)</title><rect x="0.0361%" y="293" width="0.0481%" height="15" fill="rgb(232,36,49)" fg:x="3" fg:w="4"/><text x="0.2861%" y="303.50"></text></g><g><title>ntdll`RtlIsCriticalSectionLockedByThread (4 samples, 0.05%)</title><rect x="0.0361%" y="277" width="0.0481%" height="15" fill="rgb(209,103,24)" fg:x="3" fg:w="4"/><text x="0.2861%" y="287.50"></text></g><g><title>ntdll`LdrShutdownThread (4 samples, 0.05%)</title><rect x="0.0361%" y="261" width="0.0481%" height="15" fill="rgb(229,88,8)" fg:x="3" fg:w="4"/><text x="0.2861%" y="271.50"></text></g><g><title>ntdll`RtlVirtualUnwind (2 samples, 0.02%)</title><rect x="0.0602%" y="245" width="0.0241%" height="15" fill="rgb(213,181,19)" fg:x="5" fg:w="2"/><text x="0.3102%" y="255.50"></text></g><g><title>KERNELBASE`ReadStateAtomValue (1 samples, 0.01%)</title><rect x="0.0842%" y="213" width="0.0120%" height="15" fill="rgb(254,191,54)" fg:x="7" fg:w="1"/><text x="0.3342%" y="223.50"></text></g><g><title>KERNELBASE`ReadStateAtomValue (1 samples, 0.01%)</title><rect x="0.0842%" y="197" width="0.0120%" height="15" fill="rgb(241,83,37)" fg:x="7" fg:w="1"/><text x="0.3342%" y="207.50"></text></g><g><title>ntdll`CsrClientConnectToServer (1 samples, 0.01%)</title><rect x="0.0842%" y="181" width="0.0120%" height="15" fill="rgb(233,36,39)" fg:x="7" fg:w="1"/><text x="0.3342%" y="191.50"></text></g><g><title>ntdll`CsrClientConnectToServer (1 samples, 0.01%)</title><rect x="0.0842%" y="165" width="0.0120%" height="15" fill="rgb(226,3,54)" fg:x="7" fg:w="1"/><text x="0.3342%" y="175.50"></text></g><g><title>ntdll`NtClose (1 samples, 0.01%)</title><rect x="0.0842%" y="149" width="0.0120%" height="15" fill="rgb(245,192,40)" fg:x="7" fg:w="1"/><text x="0.3342%" y="159.50"></text></g><g><title>ntdll`LdrGetProcedureAddressEx (2 samples, 0.02%)</title><rect x="0.0842%" y="261" width="0.0241%" height="15" fill="rgb(238,167,29)" fg:x="7" fg:w="2"/><text x="0.3342%" y="271.50"></text></g><g><title>ntdll`RtlActivateActivationContextUnsafeFast (2 samples, 0.02%)</title><rect x="0.0842%" y="245" width="0.0241%" height="15" fill="rgb(232,182,51)" fg:x="7" fg:w="2"/><text x="0.3342%" y="255.50"></text></g><g><title>KERNELBASE`ReadStateAtomValue (2 samples, 0.02%)</title><rect x="0.0842%" y="229" width="0.0241%" height="15" fill="rgb(231,60,39)" fg:x="7" fg:w="2"/><text x="0.3342%" y="239.50"></text></g><g><title>KERNELBASE`time (1 samples, 0.01%)</title><rect x="0.0963%" y="213" width="0.0120%" height="15" fill="rgb(208,69,12)" fg:x="8" fg:w="1"/><text x="0.3463%" y="223.50"></text></g><g><title>KERNELBASE`time (1 samples, 0.01%)</title><rect x="0.0963%" y="197" width="0.0120%" height="15" fill="rgb(235,93,37)" fg:x="8" fg:w="1"/><text x="0.3463%" y="207.50"></text></g><g><title>KERNELBASE`time (1 samples, 0.01%)</title><rect x="0.0963%" y="181" width="0.0120%" height="15" fill="rgb(213,116,39)" fg:x="8" fg:w="1"/><text x="0.3463%" y="191.50"></text></g><g><title>KERNELBASE`time (1 samples, 0.01%)</title><rect x="0.0963%" y="165" width="0.0120%" height="15" fill="rgb(222,207,29)" fg:x="8" fg:w="1"/><text x="0.3463%" y="175.50"></text></g><g><title>KERNELBASE`CreateMutexExW (1 samples, 0.01%)</title><rect x="0.0963%" y="149" width="0.0120%" height="15" fill="rgb(206,96,30)" fg:x="8" fg:w="1"/><text x="0.3463%" y="159.50"></text></g><g><title>ntdll`NtCreateMutant (1 samples, 0.01%)</title><rect x="0.0963%" y="133" width="0.0120%" height="15" fill="rgb(218,138,4)" fg:x="8" fg:w="1"/><text x="0.3463%" y="143.50"></text></g><g><title>ntdll`LdrLoadDll (7 samples, 0.08%)</title><rect x="0.0361%" y="357" width="0.0842%" height="15" fill="rgb(250,191,14)" fg:x="3" fg:w="7"/><text x="0.2861%" y="367.50"></text></g><g><title>ntdll`RtlDosPathNameToNtPathName_U (7 samples, 0.08%)</title><rect x="0.0361%" y="341" width="0.0842%" height="15" fill="rgb(239,60,40)" fg:x="3" fg:w="7"/><text x="0.2861%" y="351.50"></text></g><g><title>ntdll`RtlGetFullPathName_UstrEx (7 samples, 0.08%)</title><rect x="0.0361%" y="325" width="0.0842%" height="15" fill="rgb(206,27,48)" fg:x="3" fg:w="7"/><text x="0.2861%" y="335.50"></text></g><g><title>ntdll`RtlSwitchedVVI (3 samples, 0.04%)</title><rect x="0.0842%" y="309" width="0.0361%" height="15" fill="rgb(225,35,8)" fg:x="7" fg:w="3"/><text x="0.3342%" y="319.50"></text></g><g><title>ntdll`LdrGetProcedureAddressEx (3 samples, 0.04%)</title><rect x="0.0842%" y="293" width="0.0361%" height="15" fill="rgb(250,213,24)" fg:x="7" fg:w="3"/><text x="0.3342%" y="303.50"></text></g><g><title>ntdll`LdrGetProcedureAddressEx (3 samples, 0.04%)</title><rect x="0.0842%" y="277" width="0.0361%" height="15" fill="rgb(247,123,22)" fg:x="7" fg:w="3"/><text x="0.3342%" y="287.50"></text></g><g><title>ntdll`RtlActivateActivationContextUnsafeFast (1 samples, 0.01%)</title><rect x="0.1083%" y="261" width="0.0120%" height="15" fill="rgb(231,138,38)" fg:x="9" fg:w="1"/><text x="0.3583%" y="271.50"></text></g><g><title>KERNEL32`BaseThreadInitThunk (1 samples, 0.01%)</title><rect x="0.1083%" y="245" width="0.0120%" height="15" fill="rgb(231,145,46)" fg:x="9" fg:w="1"/><text x="0.3583%" y="255.50"></text></g><g><title>KERNEL32`BaseThreadInitThunk (1 samples, 0.01%)</title><rect x="0.1083%" y="229" width="0.0120%" height="15" fill="rgb(251,118,11)" fg:x="9" fg:w="1"/><text x="0.3583%" y="239.50"></text></g><g><title>KERNEL32`BaseThreadInitThunk (1 samples, 0.01%)</title><rect x="0.1083%" y="213" width="0.0120%" height="15" fill="rgb(217,147,25)" fg:x="9" fg:w="1"/><text x="0.3583%" y="223.50"></text></g><g><title>ntdll`vsnwprintf (1 samples, 0.01%)</title><rect x="0.1083%" y="197" width="0.0120%" height="15" fill="rgb(247,81,37)" fg:x="9" fg:w="1"/><text x="0.3583%" y="207.50"></text></g><g><title>ntdll`vsnwprintf (1 samples, 0.01%)</title><rect x="0.1083%" y="181" width="0.0120%" height="15" fill="rgb(209,12,38)" fg:x="9" fg:w="1"/><text x="0.3583%" y="191.50"></text></g><g><title>ntdll`wcstombs (1 samples, 0.01%)</title><rect x="0.1083%" y="165" width="0.0120%" height="15" fill="rgb(227,1,9)" fg:x="9" fg:w="1"/><text x="0.3583%" y="175.50"></text></g><g><title>ntdll`wcstombs (1 samples, 0.01%)</title><rect x="0.1083%" y="149" width="0.0120%" height="15" fill="rgb(248,47,43)" fg:x="9" fg:w="1"/><text x="0.3583%" y="159.50"></text></g><g><title>ntdll`wcstombs (1 samples, 0.01%)</title><rect x="0.1083%" y="133" width="0.0120%" height="15" fill="rgb(221,10,30)" fg:x="9" fg:w="1"/><text x="0.3583%" y="143.50"></text></g><g><title>ntdll`RtlDeactivateActivationContextUnsafeFast (1 samples, 0.01%)</title><rect x="0.1203%" y="325" width="0.0120%" height="15" fill="rgb(210,229,1)" fg:x="10" fg:w="1"/><text x="0.3703%" y="335.50"></text></g><g><title>ntdll`LdrShutdownThread (2 samples, 0.02%)</title><rect x="0.1203%" y="357" width="0.0241%" height="15" fill="rgb(222,148,37)" fg:x="10" fg:w="2"/><text x="0.3703%" y="367.50"></text></g><g><title>ntdll`LdrShutdownThread (2 samples, 0.02%)</title><rect x="0.1203%" y="341" width="0.0241%" height="15" fill="rgb(234,67,33)" fg:x="10" fg:w="2"/><text x="0.3703%" y="351.50"></text></g><g><title>ntdll`RtlReleaseActivationContext (1 samples, 0.01%)</title><rect x="0.1324%" y="325" width="0.0120%" height="15" fill="rgb(247,98,35)" fg:x="11" fg:w="1"/><text x="0.3824%" y="335.50"></text></g><g><title>ntdll`RtlIsCriticalSectionLockedByThread (1 samples, 0.01%)</title><rect x="0.1324%" y="309" width="0.0120%" height="15" fill="rgb(247,138,52)" fg:x="11" fg:w="1"/><text x="0.3824%" y="319.50"></text></g><g><title>ntdll`TpAllocWork (1 samples, 0.01%)</title><rect x="0.1324%" y="293" width="0.0120%" height="15" fill="rgb(213,79,30)" fg:x="11" fg:w="1"/><text x="0.3824%" y="303.50"></text></g><g><title>ntdll`RtlIsProcessorFeaturePresent (1 samples, 0.01%)</title><rect x="0.1324%" y="277" width="0.0120%" height="15" fill="rgb(246,177,23)" fg:x="11" fg:w="1"/><text x="0.3824%" y="287.50"></text></g><g><title>ntdll`TpIsTimerSet (1 samples, 0.01%)</title><rect x="0.1324%" y="261" width="0.0120%" height="15" fill="rgb(230,62,27)" fg:x="11" fg:w="1"/><text x="0.3824%" y="271.50"></text></g><g><title>ntdll`RtlAddRefActivationContext (1 samples, 0.01%)</title><rect x="0.1324%" y="245" width="0.0120%" height="15" fill="rgb(216,154,8)" fg:x="11" fg:w="1"/><text x="0.3824%" y="255.50"></text></g><g><title>ntdll`NtProtectVirtualMemory (1 samples, 0.01%)</title><rect x="0.1324%" y="229" width="0.0120%" height="15" fill="rgb(244,35,45)" fg:x="11" fg:w="1"/><text x="0.3824%" y="239.50"></text></g><g><title>ntdll`RtlAllocateHeap (1 samples, 0.01%)</title><rect x="0.1444%" y="357" width="0.0120%" height="15" fill="rgb(251,115,12)" fg:x="12" fg:w="1"/><text x="0.3944%" y="367.50"></text></g><g><title>ntdll`RtlAllocateHeap (1 samples, 0.01%)</title><rect x="0.1444%" y="341" width="0.0120%" height="15" fill="rgb(240,54,50)" fg:x="12" fg:w="1"/><text x="0.3944%" y="351.50"></text></g><g><title>ntdll`RtlInitializeBitMap (1 samples, 0.01%)</title><rect x="0.1564%" y="357" width="0.0120%" height="15" fill="rgb(233,84,52)" fg:x="13" fg:w="1"/><text x="0.4064%" y="367.50"></text></g><g><title>ntdll`RtlFormatCurrentUserKeyPath (1 samples, 0.01%)</title><rect x="0.1564%" y="341" width="0.0120%" height="15" fill="rgb(207,117,47)" fg:x="13" fg:w="1"/><text x="0.4064%" y="351.50"></text></g><g><title>ntdll`RtlAllocateHeap (1 samples, 0.01%)</title><rect x="0.1564%" y="325" width="0.0120%" height="15" fill="rgb(249,43,39)" fg:x="13" fg:w="1"/><text x="0.4064%" y="335.50"></text></g><g><title>ntdll`RtlMultiByteToUnicodeSize (1 samples, 0.01%)</title><rect x="0.1685%" y="357" width="0.0120%" height="15" fill="rgb(209,38,44)" fg:x="14" fg:w="1"/><text x="0.4185%" y="367.50"></text></g><g><title>ntdll`strnicmp (1 samples, 0.01%)</title><rect x="0.1685%" y="341" width="0.0120%" height="15" fill="rgb(236,212,23)" fg:x="14" fg:w="1"/><text x="0.4185%" y="351.50"></text></g><g><title>ntdll`strlwr_s (1 samples, 0.01%)</title><rect x="0.1685%" y="325" width="0.0120%" height="15" fill="rgb(242,79,21)" fg:x="14" fg:w="1"/><text x="0.4185%" y="335.50"></text></g><g><title>ntdll`LdrInitializeThunk (16 samples, 0.19%)</title><rect x="0.0000%" y="389" width="0.1925%" height="15" fill="rgb(211,96,35)" fg:x="0" fg:w="16"/><text x="0.2500%" y="399.50"></text></g><g><title>ntdll`LdrInitShimEngineDynamic (16 samples, 0.19%)</title><rect x="0.0000%" y="373" width="0.1925%" height="15" fill="rgb(253,215,40)" fg:x="0" fg:w="16"/><text x="0.2500%" y="383.50"></text></g><g><title>ntdll`RtlUnlockHeap (1 samples, 0.01%)</title><rect x="0.1805%" y="357" width="0.0120%" height="15" fill="rgb(211,81,21)" fg:x="15" fg:w="1"/><text x="0.4305%" y="367.50"></text></g><g><title>ntdll`RtlUnlockHeap (1 samples, 0.01%)</title><rect x="0.1805%" y="341" width="0.0120%" height="15" fill="rgb(208,190,38)" fg:x="15" fg:w="1"/><text x="0.4305%" y="351.50"></text></g><g><title>ntdll`ZwOpenFile (1 samples, 0.01%)</title><rect x="0.1805%" y="325" width="0.0120%" height="15" fill="rgb(235,213,38)" fg:x="15" fg:w="1"/><text x="0.4305%" y="335.50"></text></g><g><title>ntdll`LdrInitializeThunk (17 samples, 0.20%)</title><rect x="0.0000%" y="421" width="0.2045%" height="15" fill="rgb(237,122,38)" fg:x="0" fg:w="17"/><text x="0.2500%" y="431.50"></text></g><g><title>ntdll`LdrInitializeThunk (17 samples, 0.20%)</title><rect x="0.0000%" y="405" width="0.2045%" height="15" fill="rgb(244,218,35)" fg:x="0" fg:w="17"/><text x="0.2500%" y="415.50"></text></g><g><title>ntdll`LdrResolveDelayLoadsFromDll (1 samples, 0.01%)</title><rect x="0.1925%" y="389" width="0.0120%" height="15" fill="rgb(240,68,47)" fg:x="16" fg:w="1"/><text x="0.4425%" y="399.50"></text></g><g><title>ntdll`LdrResolveDelayLoadedAPI (1 samples, 0.01%)</title><rect x="0.1925%" y="373" width="0.0120%" height="15" fill="rgb(210,16,53)" fg:x="16" fg:w="1"/><text x="0.4425%" y="383.50"></text></g><g><title>ntdll`RtlIsProcessorFeaturePresent (1 samples, 0.01%)</title><rect x="0.1925%" y="357" width="0.0120%" height="15" fill="rgb(235,124,12)" fg:x="16" fg:w="1"/><text x="0.4425%" y="367.50"></text></g><g><title>KERNEL32`HeapFree (23 samples, 0.28%)</title><rect x="11.9841%" y="293" width="0.2767%" height="15" fill="rgb(224,169,11)" fg:x="996" fg:w="23"/><text x="12.2341%" y="303.50"></text></g><g><title>guessing_game`_rust_dealloc (22 samples, 0.26%)</title><rect x="12.2609%" y="293" width="0.2647%" height="15" fill="rgb(250,166,2)" fg:x="1019" fg:w="22"/><text x="12.5109%" y="303.50"></text></g><g><title>guessing_game`core::fmt::Formatter::new (47 samples, 0.57%)</title><rect x="12.5256%" y="293" width="0.5655%" height="15" fill="rgb(242,216,29)" fg:x="1041" fg:w="47"/><text x="12.7756%" y="303.50"></text></g><g><title>VCRUNTIME140`memcpy (155 samples, 1.86%)</title><rect x="26.1822%" y="261" width="1.8650%" height="15" fill="rgb(230,116,27)" fg:x="2176" fg:w="155"/><text x="26.4322%" y="271.50">V..</text></g><g><title>guessing_game`std::alloc::__default_lib_allocator::__rdl_alloc (133 samples, 1.60%)</title><rect x="33.9670%" y="229" width="1.6003%" height="15" fill="rgb(228,99,48)" fg:x="2823" fg:w="133"/><text x="34.2170%" y="239.50"></text></g><g><title>ntdll`RtlCreateTimer (147 samples, 1.77%)</title><rect x="67.4768%" y="197" width="1.7687%" height="15" fill="rgb(253,11,6)" fg:x="5608" fg:w="147"/><text x="67.7268%" y="207.50"></text></g><g><title>ntdll`RtlRunOnceBeginInitialize (1 samples, 0.01%)</title><rect x="69.2335%" y="181" width="0.0120%" height="15" fill="rgb(247,143,39)" fg:x="5754" fg:w="1"/><text x="69.4835%" y="191.50"></text></g><g><title>guessing_game`alloc::string::impl$65::write_str (4,321 samples, 51.99%)</title><rect x="21.2489%" y="277" width="51.9913%" height="15" fill="rgb(236,97,10)" fg:x="1766" fg:w="4321"/><text x="21.4989%" y="287.50">guessing_game`alloc::string::impl$65::write_str</text></g><g><title>guessing_game`alloc::raw_vec::impl$1::reserve::do_reserve_and_handle (3,756 samples, 45.19%)</title><rect x="28.0472%" y="261" width="45.1931%" height="15" fill="rgb(233,208,19)" fg:x="2331" fg:w="3756"/><text x="28.2972%" y="271.50">guessing_game`alloc::raw_vec::impl$1::reserve::do_reserve_and_handle</text></g><g><title>guessing_game`alloc::raw_vec::finish_grow (3,447 samples, 41.48%)</title><rect x="31.7651%" y="245" width="41.4752%" height="15" fill="rgb(216,164,2)" fg:x="2640" fg:w="3447"/><text x="32.0151%" y="255.50">guessing_game`alloc::raw_vec::finish_grow</text></g><g><title>ntdll`RtlAllocateHeap (3,131 samples, 37.67%)</title><rect x="35.5673%" y="229" width="37.6730%" height="15" fill="rgb(220,129,5)" fg:x="2956" fg:w="3131"/><text x="35.8173%" y="239.50">ntdll`RtlAllocateHeap</text></g><g><title>ntdll`RtlAllocateHeap (2,066 samples, 24.86%)</title><rect x="48.3817%" y="213" width="24.8586%" height="15" fill="rgb(242,17,10)" fg:x="4021" fg:w="2066"/><text x="48.6317%" y="223.50">ntdll`RtlAllocateHeap</text></g><g><title>ntdll`RtlSetUserValueHeap (332 samples, 3.99%)</title><rect x="69.2456%" y="197" width="3.9947%" height="15" fill="rgb(242,107,0)" fg:x="5755" fg:w="332"/><text x="69.4956%" y="207.50">ntdl..</text></g><g><title>guessing_game`core::fmt::num::imp::impl$7::fmt (5,462 samples, 65.72%)</title><rect x="13.0911%" y="293" width="65.7201%" height="15" fill="rgb(251,28,31)" fg:x="1088" fg:w="5462"/><text x="13.3411%" y="303.50">guessing_game`core::fmt::num::imp::impl$7::fmt</text></g><g><title>guessing_game`core::fmt::Formatter::pad_integral (463 samples, 5.57%)</title><rect x="73.2403%" y="277" width="5.5709%" height="15" fill="rgb(233,223,10)" fg:x="6087" fg:w="463"/><text x="73.4903%" y="287.50">guessin..</text></g><g><title>guessing_game`core::fmt::impl$9::pad_integral::write_prefix (199 samples, 2.39%)</title><rect x="76.4168%" y="261" width="2.3944%" height="15" fill="rgb(215,21,27)" fg:x="6351" fg:w="199"/><text x="76.6668%" y="271.50">gu..</text></g><g><title>guessing_game`std::io::stdio::_print (1 samples, 0.01%)</title><rect x="78.8112%" y="293" width="0.0120%" height="15" fill="rgb(232,23,21)" fg:x="6550" fg:w="1"/><text x="79.0612%" y="303.50"></text></g><g><title>guessing_game`std::io::stdio::impl$12::write_fmt (1 samples, 0.01%)</title><rect x="78.8112%" y="277" width="0.0120%" height="15" fill="rgb(244,5,23)" fg:x="6550" fg:w="1"/><text x="79.0612%" y="287.50"></text></g><g><title>guessing_game`core::fmt::write (1 samples, 0.01%)</title><rect x="78.8112%" y="261" width="0.0120%" height="15" fill="rgb(226,81,46)" fg:x="6550" fg:w="1"/><text x="79.0612%" y="271.50"></text></g><g><title>guessing_game`std::io::Write::write_fmt::impl$0::write_str (1 samples, 0.01%)</title><rect x="78.8112%" y="245" width="0.0120%" height="15" fill="rgb(247,70,30)" fg:x="6550" fg:w="1"/><text x="79.0612%" y="255.50"></text></g><g><title>guessing_game`std::io::stdio::impl$13::write_all (1 samples, 0.01%)</title><rect x="78.8112%" y="229" width="0.0120%" height="15" fill="rgb(212,68,19)" fg:x="6550" fg:w="1"/><text x="79.0612%" y="239.50"></text></g><g><title>guessing_game`std::io::buffered::bufwriter::BufWriter::flush_buf (1 samples, 0.01%)</title><rect x="78.8112%" y="213" width="0.0120%" height="15" fill="rgb(240,187,13)" fg:x="6550" fg:w="1"/><text x="79.0612%" y="223.50"></text></g><g><title>guessing_game`std::io::stdio::impl$1::write (1 samples, 0.01%)</title><rect x="78.8112%" y="197" width="0.0120%" height="15" fill="rgb(223,113,26)" fg:x="6550" fg:w="1"/><text x="79.0612%" y="207.50"></text></g><g><title>guessing_game`std::sys::windows::stdio::write (1 samples, 0.01%)</title><rect x="78.8112%" y="181" width="0.0120%" height="15" fill="rgb(206,192,2)" fg:x="6550" fg:w="1"/><text x="79.0612%" y="191.50"></text></g><g><title>KERNELBASE`GetConsoleMode (1 samples, 0.01%)</title><rect x="78.8112%" y="165" width="0.0120%" height="15" fill="rgb(241,108,4)" fg:x="6550" fg:w="1"/><text x="79.0612%" y="175.50"></text></g><g><title>ntdll`NtDeviceIoControlFile (1 samples, 0.01%)</title><rect x="78.8112%" y="149" width="0.0120%" height="15" fill="rgb(247,173,49)" fg:x="6550" fg:w="1"/><text x="79.0612%" y="159.50"></text></g><g><title>ntdll`RtlGetCurrentServiceSessionId (414 samples, 4.98%)</title><rect x="81.0612%" y="277" width="4.9814%" height="15" fill="rgb(224,114,35)" fg:x="6737" fg:w="414"/><text x="81.3112%" y="287.50">ntdll`..</text></g><g><title>ntdll`RtlFreeHeap (24 samples, 0.29%)</title><rect x="85.7538%" y="261" width="0.2888%" height="15" fill="rgb(245,159,27)" fg:x="7127" fg:w="24"/><text x="86.0038%" y="271.50"></text></g><g><title>guessing_game`main (8,280 samples, 99.63%)</title><rect x="0.2166%" y="373" width="99.6270%" height="15" fill="rgb(245,172,44)" fg:x="18" fg:w="8280"/><text x="0.4666%" y="383.50">guessing_game`main</text></g><g><title>guessing_game`std::rt::lang_start_internal (8,280 samples, 99.63%)</title><rect x="0.2166%" y="357" width="99.6270%" height="15" fill="rgb(236,23,11)" fg:x="18" fg:w="8280"/><text x="0.4666%" y="367.50">guessing_game`std::rt::lang_start_internal</text></g><g><title>guessing_game`std::rt::lang_start::closure$0&lt;tuple$ (8,280 samples, 99.63%)</title><rect x="0.2166%" y="341" width="99.6270%" height="15" fill="rgb(205,117,38)" fg:x="18" fg:w="8280"/><text x="0.4666%" y="351.50">guessing_game`std::rt::lang_start::closure$0&lt;tuple$</text></g><g><title>guessing_game`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$ (8,280 samples, 99.63%)</title><rect x="0.2166%" y="325" width="99.6270%" height="15" fill="rgb(237,72,25)" fg:x="18" fg:w="8280"/><text x="0.4666%" y="335.50">guessing_game`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;void (*)(),tuple$</text></g><g><title>guessing_game`guessing_game::main (8,280 samples, 99.63%)</title><rect x="0.2166%" y="309" width="99.6270%" height="15" fill="rgb(244,70,9)" fg:x="18" fg:w="8280"/><text x="0.4666%" y="319.50">guessing_game`guessing_game::main</text></g><g><title>ntdll`RtlFreeHeap (1,747 samples, 21.02%)</title><rect x="78.8232%" y="293" width="21.0203%" height="15" fill="rgb(217,125,39)" fg:x="6551" fg:w="1747"/><text x="79.0732%" y="303.50">ntdll`RtlFreeHeap</text></g><g><title>ntdll`memset (1,147 samples, 13.80%)</title><rect x="86.0426%" y="277" width="13.8010%" height="15" fill="rgb(235,36,10)" fg:x="7151" fg:w="1147"/><text x="86.2926%" y="287.50">ntdll`memset</text></g><g><title>ntdll`RtlSwitchedVVI (1 samples, 0.01%)</title><rect x="99.8436%" y="245" width="0.0120%" height="15" fill="rgb(251,123,47)" fg:x="8298" fg:w="1"/><text x="100.0936%" y="255.50"></text></g><g><title>ntdll`LdrGetProcedureAddressEx (1 samples, 0.01%)</title><rect x="99.8436%" y="229" width="0.0120%" height="15" fill="rgb(221,13,13)" fg:x="8298" fg:w="1"/><text x="100.0936%" y="239.50"></text></g><g><title>ntdll`LdrGetProcedureAddressEx (1 samples, 0.01%)</title><rect x="99.8436%" y="213" width="0.0120%" height="15" fill="rgb(238,131,9)" fg:x="8298" fg:w="1"/><text x="100.0936%" y="223.50"></text></g><g><title>ntdll`LdrGetProcedureAddressEx (1 samples, 0.01%)</title><rect x="99.8436%" y="197" width="0.0120%" height="15" fill="rgb(211,50,8)" fg:x="8298" fg:w="1"/><text x="100.0936%" y="207.50"></text></g><g><title>ntdll`RtlActivateActivationContextUnsafeFast (1 samples, 0.01%)</title><rect x="99.8436%" y="181" width="0.0120%" height="15" fill="rgb(245,182,24)" fg:x="8298" fg:w="1"/><text x="100.0936%" y="191.50"></text></g><g><title>msvcrt`wfindnexti64 (1 samples, 0.01%)</title><rect x="99.8436%" y="165" width="0.0120%" height="15" fill="rgb(242,14,37)" fg:x="8298" fg:w="1"/><text x="100.0936%" y="175.50"></text></g><g><title>msvcrt`_wgetmainargs (1 samples, 0.01%)</title><rect x="99.8436%" y="149" width="0.0120%" height="15" fill="rgb(246,228,12)" fg:x="8298" fg:w="1"/><text x="100.0936%" y="159.50"></text></g><g><title>msvcrt`get_heap_handle (1 samples, 0.01%)</title><rect x="99.8436%" y="133" width="0.0120%" height="15" fill="rgb(213,55,15)" fg:x="8298" fg:w="1"/><text x="100.0936%" y="143.50"></text></g><g><title>KERNELBASE`HeapCreate (1 samples, 0.01%)</title><rect x="99.8436%" y="117" width="0.0120%" height="15" fill="rgb(209,9,3)" fg:x="8298" fg:w="1"/><text x="100.0936%" y="127.50"></text></g><g><title>ntdll`RtlCreateHeap (1 samples, 0.01%)</title><rect x="99.8436%" y="101" width="0.0120%" height="15" fill="rgb(230,59,30)" fg:x="8298" fg:w="1"/><text x="100.0936%" y="111.50"></text></g><g><title>ntdll`TpWaitForWait (1 samples, 0.01%)</title><rect x="99.8436%" y="85" width="0.0120%" height="15" fill="rgb(209,121,21)" fg:x="8298" fg:w="1"/><text x="100.0936%" y="95.50"></text></g><g><title>ntdll`NtFreeVirtualMemory (1 samples, 0.01%)</title><rect x="99.8436%" y="69" width="0.0120%" height="15" fill="rgb(220,109,13)" fg:x="8298" fg:w="1"/><text x="100.0936%" y="79.50"></text></g><g><title>ntdll`LdrShutdownThread (1 samples, 0.01%)</title><rect x="99.8556%" y="165" width="0.0120%" height="15" fill="rgb(232,18,1)" fg:x="8299" fg:w="1"/><text x="100.1056%" y="175.50"></text></g><g><title>ntdll`RtlReleaseActivationContext (1 samples, 0.01%)</title><rect x="99.8556%" y="149" width="0.0120%" height="15" fill="rgb(215,41,42)" fg:x="8299" fg:w="1"/><text x="100.1056%" y="159.50"></text></g><g><title>ntdll`RtlIsCriticalSectionLockedByThread (1 samples, 0.01%)</title><rect x="99.8556%" y="133" width="0.0120%" height="15" fill="rgb(224,123,36)" fg:x="8299" fg:w="1"/><text x="100.1056%" y="143.50"></text></g><g><title>ntdll`LdrShutdownThread (1 samples, 0.01%)</title><rect x="99.8556%" y="117" width="0.0120%" height="15" fill="rgb(240,125,3)" fg:x="8299" fg:w="1"/><text x="100.1056%" y="127.50"></text></g><g><title>ntdll`LdrShutdownThread (1 samples, 0.01%)</title><rect x="99.8556%" y="101" width="0.0120%" height="15" fill="rgb(205,98,50)" fg:x="8299" fg:w="1"/><text x="100.1056%" y="111.50"></text></g><g><title>ntdll`RtlReleaseRelativeName (1 samples, 0.01%)</title><rect x="99.8556%" y="85" width="0.0120%" height="15" fill="rgb(205,185,37)" fg:x="8299" fg:w="1"/><text x="100.1056%" y="95.50"></text></g><g><title>ntdll`RtlActivateActivationContextUnsafeFast (1 samples, 0.01%)</title><rect x="99.8556%" y="69" width="0.0120%" height="15" fill="rgb(238,207,15)" fg:x="8299" fg:w="1"/><text x="100.1056%" y="79.50"></text></g><g><title>ntdll`RtlCompareUnicodeStrings (1 samples, 0.01%)</title><rect x="99.8556%" y="53" width="0.0120%" height="15" fill="rgb(213,199,42)" fg:x="8299" fg:w="1"/><text x="100.1056%" y="63.50"></text></g><g><title>ntdll`RtlCompareUnicodeString (1 samples, 0.01%)</title><rect x="99.8556%" y="37" width="0.0120%" height="15" fill="rgb(235,201,11)" fg:x="8299" fg:w="1"/><text x="100.1056%" y="47.50"></text></g><g><title>ntdll`LdrShutdownThread (2 samples, 0.02%)</title><rect x="99.8556%" y="181" width="0.0241%" height="15" fill="rgb(207,46,11)" fg:x="8299" fg:w="2"/><text x="100.1056%" y="191.50"></text></g><g><title>ntdll`RtlVirtualUnwind (1 samples, 0.01%)</title><rect x="99.8676%" y="165" width="0.0120%" height="15" fill="rgb(241,35,35)" fg:x="8300" fg:w="1"/><text x="100.1176%" y="175.50"></text></g><g><title>ntdll`RtlIsCriticalSectionLockedByThread (3 samples, 0.04%)</title><rect x="99.8556%" y="197" width="0.0361%" height="15" fill="rgb(243,32,47)" fg:x="8299" fg:w="3"/><text x="100.1056%" y="207.50"></text></g><g><title>ntdll`TpAllocWork (1 samples, 0.01%)</title><rect x="99.8797%" y="181" width="0.0120%" height="15" fill="rgb(247,202,23)" fg:x="8301" fg:w="1"/><text x="100.1297%" y="191.50"></text></g><g><title>ntdll`LdrResolveDelayLoadedAPI (1 samples, 0.01%)</title><rect x="99.8797%" y="165" width="0.0120%" height="15" fill="rgb(219,102,11)" fg:x="8301" fg:w="1"/><text x="100.1297%" y="175.50"></text></g><g><title>ucrtbase`exit (6 samples, 0.07%)</title><rect x="99.8436%" y="373" width="0.0722%" height="15" fill="rgb(243,110,44)" fg:x="8298" fg:w="6"/><text x="100.0936%" y="383.50"></text></g><g><title>ucrtbase`exit (6 samples, 0.07%)</title><rect x="99.8436%" y="357" width="0.0722%" height="15" fill="rgb(222,74,54)" fg:x="8298" fg:w="6"/><text x="100.0936%" y="367.50"></text></g><g><title>ucrtbase`crt_atexit (6 samples, 0.07%)</title><rect x="99.8436%" y="341" width="0.0722%" height="15" fill="rgb(216,99,12)" fg:x="8298" fg:w="6"/><text x="100.0936%" y="351.50"></text></g><g><title>ucrtbase`_stdio_common_vfwprintf (6 samples, 0.07%)</title><rect x="99.8436%" y="325" width="0.0722%" height="15" fill="rgb(226,22,26)" fg:x="8298" fg:w="6"/><text x="100.0936%" y="335.50"></text></g><g><title>KERNELBASE`LoadLibraryExW (6 samples, 0.07%)</title><rect x="99.8436%" y="309" width="0.0722%" height="15" fill="rgb(217,163,10)" fg:x="8298" fg:w="6"/><text x="100.0936%" y="319.50"></text></g><g><title>ntdll`LdrLoadDll (6 samples, 0.07%)</title><rect x="99.8436%" y="293" width="0.0722%" height="15" fill="rgb(213,25,53)" fg:x="8298" fg:w="6"/><text x="100.0936%" y="303.50"></text></g><g><title>ntdll`RtlDosPathNameToNtPathName_U (6 samples, 0.07%)</title><rect x="99.8436%" y="277" width="0.0722%" height="15" fill="rgb(252,105,26)" fg:x="8298" fg:w="6"/><text x="100.0936%" y="287.50"></text></g><g><title>ntdll`RtlGetFullPathName_UstrEx (6 samples, 0.07%)</title><rect x="99.8436%" y="261" width="0.0722%" height="15" fill="rgb(220,39,43)" fg:x="8298" fg:w="6"/><text x="100.0936%" y="271.50"></text></g><g><title>ntdll`RtlUnlockHeap (5 samples, 0.06%)</title><rect x="99.8556%" y="245" width="0.0602%" height="15" fill="rgb(229,68,48)" fg:x="8299" fg:w="5"/><text x="100.1056%" y="255.50"></text></g><g><title>ntdll`RtlUnlockHeap (5 samples, 0.06%)</title><rect x="99.8556%" y="229" width="0.0602%" height="15" fill="rgb(252,8,32)" fg:x="8299" fg:w="5"/><text x="100.1056%" y="239.50"></text></g><g><title>ntdll`RtlUnlockHeap (5 samples, 0.06%)</title><rect x="99.8556%" y="213" width="0.0602%" height="15" fill="rgb(223,20,43)" fg:x="8299" fg:w="5"/><text x="100.1056%" y="223.50"></text></g><g><title>ntdll`RtlUnlockHeap (2 samples, 0.02%)</title><rect x="99.8917%" y="197" width="0.0241%" height="15" fill="rgb(229,81,49)" fg:x="8302" fg:w="2"/><text x="100.1417%" y="207.50"></text></g><g><title>ntdll`NtQueryAttributesFile (2 samples, 0.02%)</title><rect x="99.8917%" y="181" width="0.0241%" height="15" fill="rgb(236,28,36)" fg:x="8302" fg:w="2"/><text x="100.1417%" y="191.50"></text></g><g><title>guessing_game`__scrt_common_main_seh (8,287 samples, 99.71%)</title><rect x="0.2166%" y="389" width="99.7112%" height="15" fill="rgb(249,185,26)" fg:x="18" fg:w="8287"/><text x="0.4666%" y="399.50">guessing_game`__scrt_common_main_seh</text></g><g><title>ucrtbase`initterm (1 samples, 0.01%)</title><rect x="99.9158%" y="373" width="0.0120%" height="15" fill="rgb(249,174,33)" fg:x="8304" fg:w="1"/><text x="100.1658%" y="383.50"></text></g><g><title>guessing_game`pre_cpp_initialization (1 samples, 0.01%)</title><rect x="99.9158%" y="357" width="0.0120%" height="15" fill="rgb(233,201,37)" fg:x="8304" fg:w="1"/><text x="100.1658%" y="367.50"></text></g><g><title>KERNELBASE`SetUnhandledExceptionFilter (1 samples, 0.01%)</title><rect x="99.9158%" y="341" width="0.0120%" height="15" fill="rgb(221,78,26)" fg:x="8304" fg:w="1"/><text x="100.1658%" y="351.50"></text></g><g><title>KERNELBASE`SetUnhandledExceptionFilter (1 samples, 0.01%)</title><rect x="99.9158%" y="325" width="0.0120%" height="15" fill="rgb(250,127,30)" fg:x="8304" fg:w="1"/><text x="100.1658%" y="335.50"></text></g><g><title>ntdll`NtQueryVirtualMemory (1 samples, 0.01%)</title><rect x="99.9158%" y="309" width="0.0120%" height="15" fill="rgb(230,49,44)" fg:x="8304" fg:w="1"/><text x="100.1658%" y="319.50"></text></g><g><title>ntdll`RtlIsCriticalSectionLockedByThread (1 samples, 0.01%)</title><rect x="99.9278%" y="293" width="0.0120%" height="15" fill="rgb(229,67,23)" fg:x="8305" fg:w="1"/><text x="100.1778%" y="303.50"></text></g><g><title>ntdll`LdrShutdownThread (1 samples, 0.01%)</title><rect x="99.9278%" y="277" width="0.0120%" height="15" fill="rgb(249,83,47)" fg:x="8305" fg:w="1"/><text x="100.1778%" y="287.50"></text></g><g><title>ntdll`TpAllocWork (1 samples, 0.01%)</title><rect x="99.9278%" y="261" width="0.0120%" height="15" fill="rgb(215,43,3)" fg:x="8305" fg:w="1"/><text x="100.1778%" y="271.50"></text></g><g><title>ntdll`TpPostWork (1 samples, 0.01%)</title><rect x="99.9278%" y="245" width="0.0120%" height="15" fill="rgb(238,154,13)" fg:x="8305" fg:w="1"/><text x="100.1778%" y="255.50"></text></g><g><title>ntdll`TpPostWork (1 samples, 0.01%)</title><rect x="99.9278%" y="229" width="0.0120%" height="15" fill="rgb(219,56,2)" fg:x="8305" fg:w="1"/><text x="100.1778%" y="239.50"></text></g><g><title>ntdll`NtReleaseWorkerFactoryWorker (1 samples, 0.01%)</title><rect x="99.9278%" y="213" width="0.0120%" height="15" fill="rgb(233,0,4)" fg:x="8305" fg:w="1"/><text x="100.1778%" y="223.50"></text></g><g><title>ntdll`RtlUnlockHeap (1 samples, 0.01%)</title><rect x="99.9398%" y="293" width="0.0120%" height="15" fill="rgb(235,30,7)" fg:x="8306" fg:w="1"/><text x="100.1898%" y="303.50"></text></g><g><title>ntdll`RtlUnlockHeap (1 samples, 0.01%)</title><rect x="99.9398%" y="277" width="0.0120%" height="15" fill="rgb(250,79,13)" fg:x="8306" fg:w="1"/><text x="100.1898%" y="287.50"></text></g><g><title>ntdll`NtQueryAttributesFile (1 samples, 0.01%)</title><rect x="99.9398%" y="261" width="0.0120%" height="15" fill="rgb(211,146,34)" fg:x="8306" fg:w="1"/><text x="100.1898%" y="271.50"></text></g><g><title>ntdll`RtlUnlockHeap (3 samples, 0.04%)</title><rect x="99.9278%" y="325" width="0.0361%" height="15" fill="rgb(228,22,38)" fg:x="8305" fg:w="3"/><text x="100.1778%" y="335.50"></text></g><g><title>ntdll`RtlUnlockHeap (3 samples, 0.04%)</title><rect x="99.9278%" y="309" width="0.0361%" height="15" fill="rgb(235,168,5)" fg:x="8305" fg:w="3"/><text x="100.1778%" y="319.50"></text></g><g><title>ntdll`ZwOpenFile (1 samples, 0.01%)</title><rect x="99.9519%" y="293" width="0.0120%" height="15" fill="rgb(221,155,16)" fg:x="8307" fg:w="1"/><text x="100.2019%" y="303.50"></text></g><g><title>all (8,311 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(215,215,53)" fg:x="0" fg:w="8311"/><text x="0.2500%" y="447.50"></text></g><g><title>ntdll`RtlUserThreadStart (8,294 samples, 99.80%)</title><rect x="0.2045%" y="421" width="99.7955%" height="15" fill="rgb(223,4,10)" fg:x="17" fg:w="8294"/><text x="0.4545%" y="431.50">ntdll`RtlUserThreadStart</text></g><g><title>KERNEL32`BaseThreadInitThunk (8,293 samples, 99.78%)</title><rect x="0.2166%" y="405" width="99.7834%" height="15" fill="rgb(234,103,6)" fg:x="18" fg:w="8293"/><text x="0.4666%" y="415.50">KERNEL32`BaseThreadInitThunk</text></g><g><title>ntdll`TpReleaseCleanupGroupMembers (6 samples, 0.07%)</title><rect x="99.9278%" y="389" width="0.0722%" height="15" fill="rgb(227,97,0)" fg:x="8305" fg:w="6"/><text x="100.1778%" y="399.50"></text></g><g><title>ntdll`TpAllocPool (6 samples, 0.07%)</title><rect x="99.9278%" y="373" width="0.0722%" height="15" fill="rgb(234,150,53)" fg:x="8305" fg:w="6"/><text x="100.1778%" y="383.50"></text></g><g><title>ntdll`RtlUnlockHeap (6 samples, 0.07%)</title><rect x="99.9278%" y="357" width="0.0722%" height="15" fill="rgb(228,201,54)" fg:x="8305" fg:w="6"/><text x="100.1778%" y="367.50"></text></g><g><title>ntdll`RtlUnlockHeap (6 samples, 0.07%)</title><rect x="99.9278%" y="341" width="0.0722%" height="15" fill="rgb(222,22,37)" fg:x="8305" fg:w="6"/><text x="100.1778%" y="351.50"></text></g><g><title>ntdll`RtlVirtualUnwind (3 samples, 0.04%)</title><rect x="99.9639%" y="325" width="0.0361%" height="15" fill="rgb(237,53,32)" fg:x="8308" fg:w="3"/><text x="100.2139%" y="335.50"></text></g><g><title>ntdll`RtlLookupFunctionEntry (1 samples, 0.01%)</title><rect x="99.9880%" y="309" width="0.0120%" height="15" fill="rgb(233,25,53)" fg:x="8310" fg:w="1"/><text x="100.2380%" y="319.50"></text></g><g><title>ntdll`RtlVirtualUnwind (1 samples, 0.01%)</title><rect x="99.9880%" y="293" width="0.0120%" height="15" fill="rgb(210,40,34)" fg:x="8310" fg:w="1"/><text x="100.2380%" y="303.50"></text></g></svg></svg>